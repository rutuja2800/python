# Import necessary libraries
from selenium import webdriver
from selenium.webdriver.common.by import By
from PIL import Image
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import base64
import os
import time
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import TimeoutException  # Add this line
from itertools import product

def click_element_by_xpath(xpath):
    element = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, xpath)))
    element.click()

def send_keys_to_element_by_xpath(xpath, keys):
    element = WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH, xpath)))
    element.clear()
    element.send_keys(keys)

def set_value_in_input(input_xpath, value):
    input_field = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, input_xpath)))
    
    actions = ActionChains(driver)
    actions.move_to_element(input_field).click().send_keys(value).perform()

def capture_screenshot(folder_path, filename):
    # Get page layout metrics
    page_rect = driver.execute_cdp_cmd("Page.getLayoutMetrics", {})

    # Capture screenshot
    screenshot = driver.execute_cdp_cmd(
        "Page.captureScreenshot",
        {
            "format": "png",
            "captureBeyondViewport": True,
            "clip": {
                "width": page_rect["contentSize"]["width"],
                "height": page_rect["contentSize"]["height"],
                "x": 0,
                "y": 0,
                "scale": 1
            }
        }
    )

    # Use os.path.join to create the complete file path
    file_path = os.path.join(folder_path, filename)

    # Save the screenshot
    with open(file_path, "wb") as file:
        file.write(base64.urlsafe_b64decode(screenshot["data"]))

def click_search_button():
    search_button_xpath = '//*[@id="classicSearchForm"]/div[1]/div/div/div/div[6]/button'
    search_button = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, search_button_xpath)))
    search_button.click()

def generate_combinations(Filter1_options, Filter2_options):
    return [f"{Filter1}{Filter1}{Filter2}_{Filter2}.png" for Filter1, Filter2 in product(Filter1_options, Filter2_options)]

def convert_images_to_pdf(folder_path, output_pdf_path, Filter1_options, Filter2_options, dropdown_option):
    all_combinations = generate_combinations(Filter1_options, Filter2_options)
    existing_images = [filename for filename in all_combinations if os.path.isfile(os.path.join(folder_path, filename))]

    pdf_path = output_pdf_path.format(dropdown_option.replace(' ', '')) if output_pdf_path.endswith('.pdf') else output_pdf_path.format(dropdown_option.replace(' ', ''))

    with open(pdf_path, 'wb') as pdf_file:
        c = canvas.Canvas(pdf_file, pagesize=letter)

        for filename in existing_images:
            image_path = os.path.join(folder_path, filename)

            try:
                img = Image.open(image_path)
                c.setPageSize((img.width, img.height))
                c.drawInlineImage(image_path, 0, 0, width=img.width, height=img.height)
                c.showPage()
            except Exception as e:
                print(f"Error processing {filename}: {e}")

        c.save()

    print(f"PDF file '{pdf_path}' created successfully.")

# Set up Chrome options to start the browser in full screen and set zoom level
chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument("--start-maximized")
chrome_options.add_argument("--disable-infobars")
chrome_options.add_argument("--disable-extensions")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--disable-browser-side-navigation")
chrome_options.add_argument("--disable-gpu")
chrome_options.add_argument("--disable-features=VizDisplayCompositor")
chrome_options.add_argument("--enable-features=NetworkServiceInProcess")

# Set zoom level
chrome_options.add_argument("--force-device-scale-factor=1")

# Set up Selenium WebDriver
driver = webdriver.Chrome(options=chrome_options)
driver.get('https://ABC.com')  # Replace with URL and necessary login steps

# Find login elements and enter credentials
username = '123'  
password = 'ABC'

# Example: Locate username and password input fields by their HTML IDs and fill them
username_field = driver.find_element(By.XPATH, '//*[@id="emailUserName"]')
password_field = driver.find_element(By.XPATH, '//*[@id="password"]')

# Input credentials
username_field.send_keys(username)
password_field.send_keys(password)

login_button = driver.find_element(By.XPATH, '//*[@id="btn-login-txt"]')
login_button.click()

# Wait for some time to ensure the page loads after logging in
time.sleep(5)

# Clicking on filter options
click_element_by_xpath('//*[@id="root"]/div/section/nav/div[1]/div[1]/a[1]/div/span')
time.sleep(2)
click_element_by_xpath('//*[@id="classicSearchForm"]/div[1]/div/div/div/div[4]/div/a/button/span[2]')
time.sleep(2)

# Dropdown options
dropdown_options = ['Option A', 'Option B', 'Option C', 'Option D', 'Option E']

# Filter1 and Filter2 options
Filter1_options = ['Red', 'Blue', 'Green', 'Yellow', 'Purple', 'Orange', 'Pink', 'Brown', 'Gray', 'Black']    #Put as many filter options you want
Filter2_options = ['Clear', 'Cloudy', 'Transparent', 'Opaque', 'Lucid', 'Obscure', 'Sheer', 'Hazy']

# Specify the folder path where you want to save the screenshots
folder_path = r'C:\Users\it\OneDrive\Desktop\Python notes\Screenshots'

# Main loop for dropdown options
for dropdown_option in dropdown_options:
    # Clicking on filter options
    click_element_by_xpath('//*[@id="root"]/div/section/nav/div[1]/div[1]/a[1]/div/span')
    time.sleep(2)
    click_element_by_xpath('//*[@id="classicSearchForm"]/div[1]/div/div/div/div[4]/div/a/button/span[2]')
    time.sleep(2)

    # Selecting from dropdown
    click_element_by_xpath('//*[@id="lotId"]/div/div[1]/div[2]')
    dropdown_input = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, '//*[@id="lotId"]/div/div[1]/div[2]/input'))
    )
    dropdown_input.clear()
    dropdown_input.send_keys(dropdown_option)
    time.sleep(2)

    # Pressing down arrow key until the desired option is found or reach the end of the dropdown
    while True:
        dropdown_input.send_keys(Keys.ARROW_DOWN)
        time.sleep(1)

        current_option = dropdown_input.get_attribute('value')
        if current_option == dropdown_option:
            break

    # Select the desired option
    dropdown_input.send_keys(Keys.ENTER)
    time.sleep(5)

  
    # Filtering by Filter3  
    set_value_in_input('//*[@id="filter.Filter3.Filter3From"]', '1000')  # Replace '1000','2000'with your Value in respective filter
    set_value_in_input('//*[@id="filter.Filter3.Filter3To"]', '2000')

    # Filtering by Filter1 and Filter2
    for Filter1 in Filter1_options:
        for Filter2 in Filter2_options:
            # Set Filter1 (from) and select from dropdown
            set_value_in_input('//*[@id="filter.Filter1.Filter1From"]/div/div[1]/div[2]', Filter1)
            click_element_by_xpath(f'//div[@id="filter.Filter1.Filter1From"]//div[text()="{Filter1}"]')

            # Set Filter1 (to) and select from dropdown
            set_value_in_input('//*[@id="filter.Filter1.Filter1To"]/div/div[1]', Filter1)
            click_element_by_xpath(f'//div[@id="filter.Filter1.Filter1To"]//div[text()="{Filter1}"]')

            # Set Filter2 (from) and select from dropdown
            set_value_in_input('//*[@id="filter.Filter2.Filter2From"]/div/div[1]/div[2]', Filter2)
            click_element_by_xpath(f'//div[@id="filter.Filter2.Filter2From"]//div[text()="{Filter2}"]')

            # Set Filter2 (to) and select from dropdown
            set_value_in_input('//*[@id="filter.Filter2.Filter2To"]/div/div[1]/div[2]', Filter2)
            click_element_by_xpath(f'//div[@id="filter.Filter2.Filter2To"]//div[text()="{Filter2}"]')

            click_search_button()

            time.sleep(5)

            # Specify the filename for the screenshot
            filename = f"{Filter1}{Filter1}{Filter2}_{Filter2}.png"

            # Capture and save the screenshot
            capture_screenshot(folder_path, filename)

            # Clicking the Modify button
            click_element_by_xpath('//*[@id="root"]/div/main/section[2]/div/section/div/div[1]/div[2]/div/a[2]')
            time.sleep(2)

    # Convert images to PDF for the current dropdown option
    convert_images_to_pdf(folder_path, r"C:\Users\it\OneDrive\Desktop\Python notes\PDF'S\{}.pdf", Filter1_options, Filter2_options, dropdown_option)

# Close the browser
driver.quit()
